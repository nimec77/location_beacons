group 'ru.elocont.location_beacons.location_beacons'
version '1.0-SNAPSHOT'

buildscript {
    ext.kotlin_version = '1.8.0'

    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.4.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

Properties credentialProperty = new Properties()
File credentialFile = rootProject.file("credentials.properties")
InputStream ins = new FileInputStream(credentialFile)
credentialProperty.load(ins)
ins.close()

android {
    buildFeatures {
        buildConfig  true
    }

    if (project.android.hasProperty("namespace")) {
        namespace 'ru.elocont.location_beacons.location_beacons'
    }

    compileSdk 34

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }

    defaultConfig {
        minSdkVersion 23
        buildConfigField 'String', 'OPENCELLID_API_KEY', "${credentialProperty['OPENCELLID_API_KEY']}"

    }

    dependencies {
        implementation 'androidx.core:core-ktx:1.13.1'
        implementation 'com.squareup.retrofit2:retrofit:2.9.0'
        implementation 'com.squareup.retrofit2:converter-moshi:2.9.0'
        implementation 'com.squareup.moshi:moshi-kotlin:1.15.1'
        testImplementation 'org.jetbrains.kotlin:kotlin-test'
        testImplementation 'org.mockito:mockito-core:5.1.0'

        kapt 'com.squareup.moshi:moshi-kotlin-codegen:1.15.1'
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()

            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen { false }
                showStandardStreams = true
            }
        }
    }
}
